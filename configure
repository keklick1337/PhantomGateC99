#!/usr/bin/env bash
#
# A minimal configure script for PhantomGate
# Checks platform, sets compiler, handles --enable-static and --enable-strip.

# Default values
CC=""
CFLAGS="-std=c99"
LDFLAGS=""
ENABLE_STATIC="no"
ENABLE_STRIP="no"

print_help() {
  echo "Usage: $0 [OPTIONS]"
  echo
  echo "Options:"
  echo "  --help           Print this help message"
  echo "  --enable-static  Attempt to build a fully static binary (Linux-only)"
  echo "  --enable-strip   Strip the final binary"
  echo
  echo "Examples:"
  echo "  ./configure --enable-static"
  echo "  ./configure --enable-strip"
  echo "  ./configure --enable-static --enable-strip"
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --help)
      print_help
      exit 0
      ;;
    --enable-static)
      ENABLE_STATIC="yes"
      shift
      ;;
    --enable-strip)
      ENABLE_STRIP="yes"
      shift
      ;;
    *)
      echo "Unknown option: $1"
      print_help
      exit 1
      ;;
  esac
done

# Detect OS
UNAME_S=$(uname -s)
if [[ "$UNAME_S" == "Darwin" ]]; then
  CC="clang"
elif [[ "$UNAME_S" == "Linux" ]]; then
  CC="gcc"
else
  echo "Warning: Unrecognized OS $UNAME_S. Defaulting to gcc."
  CC="gcc"
fi

# Handle static build
if [[ "$ENABLE_STATIC" == "yes" ]]; then
  # For fully static linking with glibc on Linux:
  # Make sure you have the static libraries installed (e.g. glibc-static).
  if [[ "$UNAME_S" == "Linux" ]]; then
    LDFLAGS="$LDFLAGS -static"
    echo "Enabling fully static build (Linux + glibc)."
  else
    echo "Warning: --enable-static is requested, but this is not Linux."
    echo "macOS does not support full static linking with system libraries."
  fi
fi

# Handle strip
STRIP_CMD="true"  # no-op by default
if [[ "$ENABLE_STRIP" == "yes" ]]; then
  # Basic 'strip' command
  #   On macOS, could do 'strip -u -r phantomgate'
  #   On Linux, just 'strip phantomgate'
  STRIP_CMD="strip phantomgate"
fi

# Output summary
echo "==========================================="
echo " Configuring PhantomGate"
echo "   OS:           $UNAME_S"
echo "   CC:           $CC"
echo "   CFLAGS:       $CFLAGS"
echo "   LDFLAGS:      $LDFLAGS"
echo "   Static:       $ENABLE_STATIC"
echo "   Strip:        $ENABLE_STRIP"
echo "==========================================="

# Generate Makefile
cat > Makefile <<EOF
# Makefile generated by configure

CC      = $CC
CFLAGS  = $CFLAGS
LDFLAGS = $LDFLAGS -pthread

all: phantomgate

phantomgate: src/phantomgate.c
	\$(CC) \$(CFLAGS) src/phantomgate.c -o phantomgate \$(LDFLAGS)
	$STRIP_CMD

clean:
	rm -f phantomgate *.o

EOF

echo
echo "Configuration complete. Run 'make' to build."
